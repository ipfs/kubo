name: Sync github release assets with dist.ipfs.io

on: push

jobs:
  sync-github-and-dist-ipfs-io:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Build go-ipfs binary
        run: |
          cd cmd/ipfs
          go install
      - name: Initialize go-ipfs and start daemon
        run: |
          ipfs init
          ipfs daemon &
          sleep 7
      - name: Wait for go-ipfs to be ready
        shell: pwsh
        run: |
          for ($i = 0; $i -lt 10; $i++) {
            $addrs = ipfs id | jq .Addresses;
            if ($addrs -eq "null") {
              sleep 1
            } else {
              echo "Successfully started the daemon"
              exit 0
            }
          }
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm install execa
      - name: List github releases
        uses: actions/github-script@v4
        with:
          script: |
            const execa = require('execa')
            const fs = require('fs').promises

            // fetch github releases
            resp = await github.repos.listReleases({ owner: context.repo.owner, repo: context.repo.repo })
            const release_assets = [];
            num_synced = 0;
            for (const release of resp.data) {

              // sync at most 5 of the latest releases
              if (num_synced >= 1) {
                break;
              }
              num_synced += 1
              
              const github_assets = [];
              github_map = {};
              for (const asset of release.assets) {
                github_assets.push(asset.name);
                github_map[asset.name] = true;
              }

              // fetch asset info from dist.ipfs.io
              p = '/ipns/dist.ipfs.io/go-ipfs/' + release.tag_name
              const { stdout } = await execa('ipfs', ['ls', p])

              const dist_assets = []
              missing_files = []
              for (const line of stdout.split("\n")) {
                file = line.split(/(\s+)/).filter( function(e) { return e.trim().length > 0; } )[2]
                dist_assets.push(file)
                if (!github_map[file]) {
                  missing_files.push(file)
                }
              }

              // if dist.ipfs.io has files not found in github, copy them over
              for (const file of missing_files) {
                console.log("fetching", file, "from dist.ipfs.io")
                await execa('ipfs', ['get', p + '/' + file])
                const data = await fs.readFile(file, "binary")
                console.log("uploading", file, "to github release", release.tag_name)
                resp = await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: file,
                  data: data,
                })
              }

              // summary of assets on both sides
              release_assets.push({ tag: release.tag_name, github_assets: github_assets, dist_assets: dist_assets })
            }
            console.log(release_assets)
            return release_assets
