version: 2.1
setup: true
orbs:
  continuation: circleci/continuation@0.2.0
jobs:
<<<<<<< HEAD
  generate-params:
    executor: continuation/default
=======
  gobuild:
    executor: golang
    steps:
    - checkout
    - *make_out_dirs
    - *restore_gomod
    - run:
        command: make cmd/ipfs-try-build
        environment:
          TEST_NO_FUSE: 0
    - run:
        command: make cmd/ipfs-try-build
        environment:
          TEST_NO_FUSE: 1
    - *store_gomod
  golint:
    executor: golang
    steps:
    - checkout
    - *make_out_dirs
    - *restore_gomod
    - run: |
        make -O test_go_lint
    - *store_gomod
  gotest:
    executor: golang
    steps:
    - checkout
    - *make_out_dirs

    - run: |
        make -j 1 test/unit/gotest.junit.xml \
        && [[ ! $(jq -s -c 'map(select(.Action == "fail")) | .[]' test/unit/gotest.json) ]]
    - run:
        when: always
        command: bash <(curl -s https://codecov.io/bash) -cF unittests -X search -f coverage/unit_tests.coverprofile
    - run:
        command: go test -v ./...
        working_directory: ~/ipfs/go-ipfs/docs/examples/go-ipfs-as-a-library

    - run:
        when: always
        command: mv "test/unit/gotest.junit.xml" /tmp/circleci-test-results/unit

    - *store_gomod

    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
  sharness:
    machine:
        image: ubuntu-2004:202010-01
    resource_class: 2xlarge
    working_directory: ~/ipfs/go-ipfs
    environment:
        <<: *default_environment
        TEST_NO_DOCKER: 1
        TEST_NO_FUSE: 1
        TEST_VERBOSE: 1
    steps:
    - run: sudo apt update
    - run: |
        mkdir ~/localgo && cd ~/localgo
        wget https://golang.org/dl/go1.16.7.linux-amd64.tar.gz
        tar xfz go1.16.7.linux-amd64.tar.gz
        echo "export PATH=$(pwd)/go/bin:\$PATH" >> ~/.bashrc
    - run: go version
    - run: sudo apt install socat net-tools
    - checkout

    - run:
        mkdir rb-pinning-service-api &&
        cd rb-pinning-service-api &&
        git init &&
        git remote add origin  https://github.com/ipfs-shipyard/rb-pinning-service-api.git &&
        git fetch --depth 1 origin 773c3adbb421c551d2d89288abac3e01e1f7c3a8 &&
        git checkout FETCH_HEAD
    - run:
        cd rb-pinning-service-api &&
        docker-compose pull &&
        docker-compose up -d

    - *make_out_dirs
    - *restore_gomod

    - run:
        name: Setup Environment Variables
        # we need the docker host IP; all ports exported by child containers can be accessed there.
        command: echo "export TEST_DOCKER_HOST=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')" >> $BASH_ENV
    - run:
        echo TEST_DOCKER_HOST=$TEST_DOCKER_HOST &&
        make -O -j 10 coverage/sharness_tests.coverprofile test/sharness/test-results/sharness.xml TEST_GENERATE_JUNIT=1 CONTINUE_ON_S_FAILURE=1 TEST_DOCKER_HOST=$TEST_DOCKER_HOST
    - run:
        when: always
        command: bash <(curl -s https://codecov.io/bash) -cF sharness -X search -f coverage/sharness_tests.coverprofile

    - run: mv "test/sharness/test-results/sharness.xml" /tmp/circleci-test-results/sharness
    # make sure we fail if there are test failures
    - run: find test/sharness/test-results -name 't*-*.sh.*.counts' | test/sharness/lib/sharness/aggregate-results.sh | grep 'failed\s*0'

    - *store_gomod

    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
  build:
    executor: golang
>>>>>>> origin/bifrost-bitswap-cache-wantlist
    steps:
      - checkout
      - run: 
          name: Generate params
          # for builds on the ipfs/kubo repo, use 2xlarge for faster builds
          # but since this is not available for many contributors, we otherwise use medium
          command: |
            echo $CIRCLE_REPOSITORY_URL
            if [ "$CIRCLE_REPOSITORY_URL" = 'git@github.com:ipfs/kubo.git' ]; then
                resource_class=2xlarge
                make_jobs=10
            else
                resource_class=medium
                make_jobs=3
            fi
            cat \<<- EOF > params.json
              {
                "resource_class": "$resource_class",
                "make_jobs": "$make_jobs"
              }
            EOF
            cat params.json
      - continuation/continue:
          parameters: params.json
          configuration_path: .circleci/main.yml
workflows:
  version: 2
  setup-workflow:
    jobs:
<<<<<<< HEAD
      - generate-params
=======
    - gobuild
    - golint
    - gotest
    - sharness
    - build
    - interop:
        requires:
          - build
    - go-ipfs-api:
        requires:
          - build
    - go-ipfs-http-client:
        requires:
          - build
    - ipfs-webui:
        requires:
          - build
    - docker-build
    - docker-push:
        # Requires dockerhub credentials, from circleci context.
        context: dockerhub
        requires:
          - docker-build
          - golint
          - sharness
          - interop
          - go-ipfs-api
          - go-ipfs-http-client
          - ipfs-webui
        filters:
          branches:
            only:
              - master
              # the bifrost-* branches are used for deploying code that hasn't hit master yet (e.g. for testing)
              - /^bifrost-.*/


  # NOTE: CircleCI only builds tags if you explicitly filter for them. That
  # also means tag-based jobs can only depend on other tag-based jobs, so we
  # use a separate workflow because every job needs to be tagged together.
  # see: https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
  docker-on-tag:
    jobs:
      - docker-build:
          filters: *only-version-tags
      - docker-push:
          context: dockerhub
          filters: *only-version-tags
          requires:
            - docker-build
>>>>>>> origin/bifrost-bitswap-cache-wantlist
